// Licensed under the Apache License, Version 2.0 (the "License").
// See the LICENSE file in the project root for more information.

using Cronos;
using DevDecoder.Scheduling.Schedules;

namespace DevDecoder.Scheduling.Test;

public class CronFacts
{
    [Theory]
    // 2017-10-01 is date when the clock jumps forward from 1:59 am +10:30 standard time (ST) to 2:30 am +11:00 DST on Lord Howe.
    // ________1:59 ST///invalid///2:30 DST________
    [InlineData("0 */30 *      *  *  *    ", "2017-10-01 01:45 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 */30 */2    *  *  *    ", "2017-10-01 01:59 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 1-58 */2    *  *  *    ", "2017-10-01 01:59 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 0,30 0-23/2 *  *  *    ", "2017-10-01 01:59 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 */30 2      *  *  *    ", "2017-10-01 01:59 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 0,30 2      *  *  *    ", "2017-10-01 01:59 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 */30 2      01 10 *    ", "2017-10-01 01:59 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 0,30 02     01 10 *    ", "2017-10-01 01:45 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 30   2      *  *  *    ", "2017-10-01 01:59 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 0,30 */2    *  *  *    ", "2017-10-01 01:59 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 30   0-23/2 *  *  *    ", "2017-10-01 01:59 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 0,30,59 *      *  *  *    ", "2017-10-01 01:59 +10:30", "2017-10-01 02:30 +11:00")]
    [InlineData("0 0,30,59 *      *  *  *    ", "2017-10-01 02:30 +11:00", "2017-10-01 02:59 +11:00")]
    [InlineData("0 30   *      *  10 SUN#1", "2017-10-01 01:59 +10:30", "2017-10-01 02:30 +11:00")]
    public void HandleDST_WhenTheClockTurnedForwardHalfHour(string cronExpression, string fromString,
        string expectedString)
    {
        var schedule = new CronSchedule(cronExpression, CronFormat.IncludeSeconds);
        var from = fromString.ToZonedDateTime(TestHelpers.LordHoweTimeZone);
        var expected = expectedString.ToZonedDateTime(TestHelpers.LordHoweTimeZone);

        var executed = schedule.Next(TestHelpers.DefaultScheduler, from);

        Assert.Equal(expected, executed);
        Assert.Equal("cronExpression", schedule.Name);
    }

    [Theory]
    // 2017-04-02 is date when the clock jumps backward from 2:00 am -+11:00 DST to 1:30 am +10:30 ST on Lord Howe.
    // _______1:30 DST____1:59 DST -> 1:30 ST____2:00 ST_______

    // Run at 2:00 ST because 2:00 DST is invalid.
    [InlineData("0 */30 */2 * * *", "2017-04-02 01:30 +11:00", "2017-04-02 02:00 +10:30")]
    [InlineData("0 0    */2 * * *", "2017-04-02 00:30 +11:00", "2017-04-02 02:00 +10:30")]
    [InlineData("0 0    0/2 * * *", "2017-04-02 00:30 +11:00", "2017-04-02 02:00 +10:30")]
    [InlineData("0 0    2-3 * * *", "2017-04-02 00:30 +11:00", "2017-04-02 02:00 +10:30")]

    // Run twice due to intervals.
    [InlineData("0 */30 *   * * *", "2017-04-02 01:29:59 +11:00", "2017-04-02 01:30 +11:00")]
    [InlineData("0 */30 *   * * *", "2017-04-02 01:59 +11:00", "2017-04-02 01:30 +10:30")]
    [InlineData("0 30   *   * * *", "2017-04-02 01:30 +11:00", "2017-04-02 01:30 +10:30")]
    [InlineData("0 30   *   * * *", "2017-04-02 01:59 +11:00", "2017-04-02 01:30 +10:30")]
    [InlineData("0 30   */1 * * *", "2017-04-02 01:29:59 +11:00", "2017-04-02 01:30 +11:00")]
    [InlineData("0 30   */1 * * *", "2017-04-02 01:59 +11:00", "2017-04-02 01:30 +10:30")]
    [InlineData("0 30   0/1 * * *", "2017-04-02 01:29:59 +11:00", "2017-04-02 01:30 +11:00")]
    [InlineData("0 30   0/1 * * *", "2017-04-02 01:59 +11:00", "2017-04-02 01:30 +10:30")]
    [InlineData("0 30   1-9 * * *", "2017-04-02 01:29:59 +11:00", "2017-04-02 01:30 +11:00")]
    [InlineData("0 30   1-9 * * *", "2017-04-02 01:59 +11:00", "2017-04-02 01:30 +10:30")]
    [InlineData("0 */30 1   * * *", "2017-04-02 00:59:59 +11:00", "2017-04-02 01:00 +11:00")]
    [InlineData("0 */30 1   * * *", "2017-04-02 01:20 +11:00", "2017-04-02 01:30 +11:00")]
    [InlineData("0 */30 1   * * *", "2017-04-02 01:59 +11:00", "2017-04-02 01:30 +10:30")]
    [InlineData("0 0/30 1   * * *", "2017-04-02 00:59:59 +11:00", "2017-04-02 01:00 +11:00")]
    [InlineData("0 0/30 1   * * *", "2017-04-02 01:20 +11:00", "2017-04-02 01:30 +11:00")]
    [InlineData("0 0/30 1   * * *", "2017-04-02 01:59 +11:00", "2017-04-02 01:30 +10:30")]
    [InlineData("0 0-30 1   * * *", "2017-04-02 00:59:59 +11:00", "2017-04-02 01:00 +11:00")]
    [InlineData("0 0-30 1   * * *", "2017-04-02 01:20 +11:00", "2017-04-02 01:21 +11:00")]
    [InlineData("0 0-30 1   * * *", "2017-04-02 01:59 +11:00", "2017-04-02 01:30 +10:30")]
    [InlineData("*/30 30 1 * * *", "2017-04-02 00:30:00 +11:00", "2017-04-02 01:30:00 +11:00")]
    [InlineData("*/30 30 1 * * *", "2017-04-02 01:30:01 +11:00", "2017-04-02 01:30:30 +11:00")]
    [InlineData("*/30 30 1 * * *", "2017-04-02 01:30:31 +11:00", "2017-04-02 01:30:00 +10:30")]
    [InlineData("*/30 30 1 * * *", "2017-04-02 01:30:01 +10:30", "2017-04-02 01:30:30 +10:30")]
    [InlineData("*/30 30 1 * * *", "2017-04-02 01:30:31 +10:30", "2017-04-03 01:30:00 +10:30")]
    [InlineData("0/30 30 1 * * *", "2017-04-02 00:30:00 +11:00", "2017-04-02 01:30:00 +11:00")]
    [InlineData("0/30 30 1 * * *", "2017-04-02 01:30:01 +11:00", "2017-04-02 01:30:30 +11:00")]
    [InlineData("0/30 30 1 * * *", "2017-04-02 01:30:31 +11:00", "2017-04-02 01:30:00 +10:30")]
    [InlineData("0/30 30 1 * * *", "2017-04-02 01:30:01 +10:30", "2017-04-02 01:30:30 +10:30")]
    [InlineData("0/30 30 1 * * *", "2017-04-02 01:30:31 +10:30", "2017-04-03 01:30:00 +10:30")]
    [InlineData("0-30 30 1 * * *", "2017-04-02 00:30:00 +11:00", "2017-04-02 01:30:00 +11:00")]
    [InlineData("0-30 30 1 * * *", "2017-04-02 01:30:01 +11:00", "2017-04-02 01:30:02 +11:00")]
    [InlineData("0-30 30 1 * * *", "2017-04-02 01:30:31 +11:00", "2017-04-02 01:30:00 +10:30")]
    [InlineData("0-30 30 1 * * *", "2017-04-02 01:30:01 +10:30", "2017-04-02 01:30:02 +10:30")]
    [InlineData("0-30 30 1 * * *", "2017-04-02 01:30:31 +10:30", "2017-04-03 01:30:00 +10:30")]

    // Duplicates skipped due to certain time.
    [InlineData("0 0,30 1   * * *", "2017-04-02 00:59:59 +11:00", "2017-04-02 01:00 +11:00")]
    [InlineData("0 0,30 1   * * *", "2017-04-02 01:20 +11:00", "2017-04-02 01:30 +11:00")]
    [InlineData("0 0,30 1   * * *", "2017-04-02 01:30 +10:30", "2017-04-03 01:00 +10:30")]
    [InlineData("0 0,30 1   * 2/2 *", "2017-04-02 00:59:59 +11:00", "2017-04-02 01:00 +11:00")]
    [InlineData("0 0,30 1   * 2/2 *", "2017-04-02 01:20 +11:00", "2017-04-02 01:30 +11:00")]
    [InlineData("0 0,30 1   * 2/2 *", "2017-04-02 01:30 +10:30", "2017-04-03 01:00 +10:30")]
    [InlineData("0 0,30 1   2/1 1-12 0/1", "2017-04-02 00:59:59 +11:00", "2017-04-02 01:00 +11:00")]
    [InlineData("0 0,30 1   2/1 1-12 0/1", "2017-04-02 01:20 +11:00", "2017-04-02 01:30 +11:00")]
    [InlineData("0 0,30 1   2/1 1-12 0/1", "2017-04-02 01:30 +10:30", "2017-04-03 01:00 +10:30")]
    [InlineData("0 30    1   * * *", "2017-04-02 01:30 +11:00", "2017-04-03 01:30 +10:30")]
    [InlineData("0 30    1   * * *", "2017-04-02 01:30 +10:30", "2017-04-03 01:30 +10:30")]
    public void HandleDST_WhenTheClockJumpedBackwardAndDeltaIsNotHour(string cronExpression, string fromString,
        string expectedString)
    {
        var schedule = new CronSchedule(cronExpression, CronFormat.IncludeSeconds);
        var from = fromString.ToZonedDateTime(TestHelpers.LordHoweTimeZone);
        var expected = expectedString.ToZonedDateTime(TestHelpers.LordHoweTimeZone);

        var executed = schedule.Next(TestHelpers.DefaultScheduler, from);

        Assert.Equal(expected, executed);
    }
}
